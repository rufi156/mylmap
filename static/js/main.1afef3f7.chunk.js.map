{"version":3,"sources":["Table.js","Form.js","Tree.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","TableBody","props","rows","nodeData","map","row","index","done","is_done","key","content","onClick","removeNode","Table","Form","handleTextChange","event","target","name","value","setState","handleCheckboxChange","state","onFormSubmit","preventDefault","handleSubmit","initialState","checked","this","onSubmit","for","type","id","onChange","Component","Tree","treeData","title","subtitle","expanded","children","style","height","App","nodes","filter","node","i","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1afef3f7.chunk.js","sourcesContent":["import React from 'react';\n\nconst TableHeader = () => {\n    return (\n        <thead>\n            <tr>\n                <th>Content</th>\n                <th>is_done</th>\n                <th>Remove</th>\n            </tr>\n        </thead>\n    );\n}\n\nconst TableBody = props => {\n    const rows = props.nodeData.map((row, index) => {\n      let done = row.is_done == \"\" ? \"no\" : \"yes\";\n        return (\n            <tr key={index}>\n                <td>{row.content}</td>\n                <td>{done}</td>\n                <td><button onClick={() => props.removeNode(index)}>Remove</button></td>\n            </tr>\n        );\n    });\n\n    return <tbody>{rows}</tbody>;\n}\n\nconst Table = (props) => {\n    const { nodeData, removeNode } = props;\n        return (\n            <table>\n                <TableHeader />\n                <TableBody nodeData={nodeData} removeNode={removeNode} />\n            </table>\n        );\n}\n\nexport default Table;\n","import React, {Component} from 'react';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n\n        this.initialState = {\n            content: '',\n            is_done: false\n        };\n\n        this.state = this.initialState;\n    }\n\n    handleTextChange = event => {\n        const { name, value } = event.target;\n\n        this.setState({\n            [name] : value,\n        });\n    }\n\n    handleCheckboxChange = event => {\n        this.setState({\n            is_done: !this.state.is_done\n        });\n      }\n\n    onFormSubmit = (event) => {\n        event.preventDefault();\n\n        this.props.handleSubmit(this.state);\n        this.setState(this.initialState);\n        //visually reset the checkbox\n        event.target[1].checked=this.initialState.is_done;\n    }\n\n    render() {\n        const { content, is_done} = this.state;\n\n        return (\n            <form onSubmit={this.onFormSubmit}>\n                <label for=\"content\">Contet</label>\n                <input\n                    type=\"text\"\n                    name=\"content\"\n                    id=\"content\"\n                    value={content}\n                    onChange={this.handleTextChange} />\n                <label for=\"is_done\">Is_done</label>\n                <input\n                    type=\"checkbox\"\n                    name=\"is_done\"\n                    id=\"is_done\"\n                    value={is_done}\n                    onChange={this.handleCheckboxChange} />\n                <br />\n                <button type=\"submit\">\n                    Submit\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport SortableTree from 'react-sortable-tree';\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\n\nclass Tree extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      treeData: [\n        {title:'Chicken', subtitle:'NotDone', expanded:true, children:[\n          {title:'Egg', subtitle:'Done', children:[\n            {title:'yolk', subtitle:'NotDone'},\n            {title:'white', subtitle:'Done'}\n          ] }\n        ]},\n        {title:'Fish', subtitle:'Done', children:[\n          {title:'Carp', subtitle:'Done'},\n          {title:'Trout', subtitle:'NotDone'}\n        ] }\n      ],\n    };\n  }\n\n  render() {\n    return (\n      <div style={{ height: 400 }}>\n        <SortableTree\n          treeData={this.state.treeData}\n          onChange={treeData => this.setState({ treeData })}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Tree;\n","import React, { Component } from 'react';\nimport Table from './Table';\nimport Form from './Form';\nimport Tree from './Tree';\n\nclass App extends Component {\n    state = {\n        nodes: [\n          {content:'Chicken', is_done:false},\n          {content:'Egg', is_done:true},\n          {content:'yolk', is_done:false},\n          {content:'white', is_done:true},\n          {content:'Fish', is_done:true},\n          {content:'Carp', is_done:true},\n          {content:'Trout', is_done:false},\n        ] };\n\n    removeNode = index => {\n        const { nodes } = this.state;\n\n        this.setState({\n            nodes: nodes.filter((node, i) => {\n                return i !== index;\n            })\n        });\n    }\n\n    handleSubmit = node => {\n        this.setState({nodes: [...this.state.nodes, node]});\n    }\n\n    render() {\n        const { nodes } = this.state;\n\n        return (\n            <div className=\"container\">\n                <h1>LMAP</h1>\n                <p>Add a node with a content and a is_done to the table.</p>\n                <Tree />\n                <Table\n                    nodeData={nodes}\n                    removeNode={this.removeNode}\n                />\n                <h3>Add New</h3>\n                <Form handleSubmit={this.handleSubmit} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}